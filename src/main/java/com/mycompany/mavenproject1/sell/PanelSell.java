/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.mavenproject1.sell;

import com.mycompany.mavenproject1.apiclient.ApiClient;
import com.mycompany.mavenproject1.apiclient.persons.PersonsResponse;
import com.mycompany.mavenproject1.apiclient.products.ProductsResponse;
import com.mycompany.mavenproject1.apiclient.sells.ProductsSaleRequest;
import com.mycompany.mavenproject1.apiclient.sells.SaleRequest;
import com.mycompany.mavenproject1.sqlite.SQLiteJDBC;
import com.mycompany.mavenproject1.utils.StyledButtonUI;
import java.awt.Color;
import java.awt.Frame;
import java.awt.Window;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

/**
 *
 * @author geezylucas
 */
public class PanelSell extends javax.swing.JPanel {

    private int folioClient = 2;

    public void getTxtCodeProduct() {
        txtCodeProduct.requestFocusInWindow();
    }

    /**
     * Creates new form PanelSell
     */
    public PanelSell() {
        initComponents();
        tblProducts.getColumnModel().getColumn(0).setMinWidth(0);
        tblProducts.getColumnModel().getColumn(0).setMaxWidth(0);
        tblProducts.getColumnModel().getColumn(0).setWidth(0);
        tblProducts.setRowHeight(30);
        tblProducts.setShowGrid(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblCodeProduct = new javax.swing.JLabel();
        txtCodeProduct = new javax.swing.JTextField();
        btnAddProduct = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnRemoveProduct = new javax.swing.JButton();
        btnSomeProducts = new javax.swing.JButton();
        lblClient = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnCharge = new javax.swing.JButton();
        lblTotalMoney = new javax.swing.JLabel();
        lblTotalProducts = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnPendingSell = new javax.swing.JButton();
        btnPendingSells = new javax.swing.JButton();
        btnAssignClient = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setFont(new java.awt.Font("Nadeem", 0, 18)); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 110));

        lblCodeProduct.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        lblCodeProduct.setText("Código de producto:");

        txtCodeProduct.setFont(new java.awt.Font("SansSerif", 0, 17)); // NOI18N
        txtCodeProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodeProductActionPerformed(evt);
            }
        });

        btnAddProduct.setBackground(new java.awt.Color(0, 166, 237));
        btnAddProduct.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnAddProduct.setForeground(new java.awt.Color(255, 255, 255));
        btnAddProduct.setText("Agregar");
        btnAddProduct.setMaximumSize(new java.awt.Dimension(95, 40));
        btnAddProduct.setMinimumSize(new java.awt.Dimension(95, 40));
        btnAddProduct.setPreferredSize(new java.awt.Dimension(95, 40));
        btnAddProduct.setUI(new StyledButtonUI());
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel3.setText("Venta Ticket #1");

        btnRemoveProduct.setBackground(new java.awt.Color(246, 81, 29));
        btnRemoveProduct.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnRemoveProduct.setForeground(new java.awt.Color(255, 255, 255));
        btnRemoveProduct.setText("Quitar producto");
        btnRemoveProduct.setMaximumSize(new java.awt.Dimension(117, 40));
        btnRemoveProduct.setMinimumSize(new java.awt.Dimension(117, 40));
        btnRemoveProduct.setPreferredSize(new java.awt.Dimension(117, 40));
        btnRemoveProduct.setUI(new StyledButtonUI());
        btnRemoveProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveProductActionPerformed(evt);
            }
        });

        btnSomeProducts.setBackground(new java.awt.Color(0, 166, 237));
        btnSomeProducts.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnSomeProducts.setForeground(new java.awt.Color(255, 255, 255));
        btnSomeProducts.setText("Varios");
        btnSomeProducts.setMaximumSize(new java.awt.Dimension(117, 40));
        btnSomeProducts.setMinimumSize(new java.awt.Dimension(117, 40));
        btnSomeProducts.setPreferredSize(new java.awt.Dimension(117, 40));
        btnSomeProducts.setUI(new StyledButtonUI());
        btnSomeProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSomeProductsActionPerformed(evt);
            }
        });

        lblClient.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        lblClient.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClient.setText("Cliente: Anónimo");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblCodeProduct)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCodeProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSomeProducts, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 214, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblClient, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblClient))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCodeProduct)
                    .addComponent(txtCodeProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSomeProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(1200, 150));

        btnCharge.setBackground(new java.awt.Color(255, 180, 0));
        btnCharge.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        btnCharge.setText("Cobrar");
        btnCharge.setUI(new StyledButtonUI());
        btnCharge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChargeActionPerformed(evt);
            }
        });

        lblTotalMoney.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        lblTotalMoney.setText("$0.00");

        lblTotalProducts.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        lblTotalProducts.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalProducts.setText("Total productos: 0");

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel2.setText("Funciones adicionales:");

        btnPendingSell.setBackground(new java.awt.Color(127, 184, 0));
        btnPendingSell.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnPendingSell.setForeground(new java.awt.Color(255, 255, 255));
        btnPendingSell.setText("Venta pendiente");
        btnPendingSell.setUI(new StyledButtonUI());

        btnPendingSells.setBackground(new java.awt.Color(127, 184, 0));
        btnPendingSells.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnPendingSells.setForeground(new java.awt.Color(255, 255, 255));
        btnPendingSells.setText("Pendientes");
        btnPendingSells.setUI(new StyledButtonUI());

        btnAssignClient.setBackground(new java.awt.Color(127, 184, 0));
        btnAssignClient.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnAssignClient.setForeground(new java.awt.Color(255, 255, 255));
        btnAssignClient.setText("Asignar a cliente");
        btnAssignClient.setMaximumSize(new java.awt.Dimension(165, 40));
        btnAssignClient.setMinimumSize(new java.awt.Dimension(165, 40));
        btnAssignClient.setPreferredSize(new java.awt.Dimension(165, 40));
        btnAssignClient.setUI(new StyledButtonUI());
        btnAssignClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignClientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnAssignClient, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnPendingSell)
                        .addGap(18, 18, 18)
                        .addComponent(btnPendingSells)))
                .addGap(192, 192, 192))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAssignClient, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPendingSell, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPendingSells, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCharge, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblTotalMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalProducts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTotalMoney, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCharge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblTotalProducts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        tblProducts.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Código de barras", "Producto", "Precio de venta", "Cantidad", "Importe", "Inventario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProducts);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1176, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnChargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChargeActionPerformed
        // TODO add your handling code here:
        if (tblProducts.getRowCount() > 0) {
            SQLiteJDBC sqlite = new SQLiteJDBC();
            Integer userId = sqlite.getUserId();
            Integer boxId = sqlite.getBoxId();

            SaleRequest saleRequest = new SaleRequest();
            saleRequest.setUserId(userId);
            saleRequest.setBoxId(boxId);
            //TODO: add assign client
            saleRequest.setPersonId(this.folioClient);
            saleRequest.setTotal(new BigDecimal(lblTotalMoney.getText().substring(1)));
            List<ProductsSaleRequest> productsSale = new ArrayList<>();
            for (int i = 0; i < tblProducts.getRowCount(); i++) {
                ProductsSaleRequest product = new ProductsSaleRequest();
                product.setProductId((int) tblProducts.getValueAt(i, 0));
                product.setQuantity((int) tblProducts.getValueAt(i, 4));
                productsSale.add(product);
            }
            saleRequest.setProducts(productsSale);

            Window parentWindow = SwingUtilities.windowForComponent(this);
            // or pass 'this' if you are inside the panel
            Frame parentFrame = null;
            if (parentWindow instanceof Frame) {
                parentFrame = (Frame) parentWindow;
            }
            DialogSaleConfirm saleConfirm = new DialogSaleConfirm(parentFrame, true, saleRequest);
            saleConfirm.setLocationRelativeTo(null);
            saleConfirm.setVisible(true);

            saleConfirm.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    refresh();
                }
            });
            txtCodeProduct.requestFocusInWindow();
        }
    }//GEN-LAST:event_btnChargeActionPerformed

    private void refresh() {
        txtCodeProduct.requestFocusInWindow();
        DefaultTableModel model = (DefaultTableModel) this.tblProducts.getModel();
        int rows = model.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        lblTotalProducts.setText("Total productos: 0");
        lblTotalMoney.setText("$0.00");
        this.folioClient = 2;
        lblClient.setText("Cliente: Anónimo");
    }

    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProductActionPerformed
        // TODO add your handling code here:
        addProduct();
    }//GEN-LAST:event_btnAddProductActionPerformed

    private void txtCodeProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodeProductActionPerformed
        // TODO add your handling code here:
        addProduct();
    }//GEN-LAST:event_txtCodeProductActionPerformed

    private void btnRemoveProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveProductActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) this.tblProducts.getModel();
        int[] rows = this.tblProducts.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            model.removeRow(rows[i] - i);
        }

        refreshTotals();
        txtCodeProduct.requestFocusInWindow();
    }//GEN-LAST:event_btnRemoveProductActionPerformed

    private void btnSomeProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSomeProductsActionPerformed
        // TODO add your handling code here:

        java.awt.GridBagConstraints gridBagConstraints;

        JPanel jPanelDialogSome = new javax.swing.JPanel();
        JLabel jLabel3DialogSome = new javax.swing.JLabel();
        JTextField txtCodeProductDialogSome = new javax.swing.JTextField();
        JLabel jLabel1DialogSome = new javax.swing.JLabel();
        JLabel jLabel4DialogSome = new javax.swing.JLabel();
        JTextField txtQuantityDialogSome = new javax.swing.JTextField();

        jPanelDialogSome.setLayout(new java.awt.GridBagLayout());

        jLabel3DialogSome.setText("Código del producto:");
        jLabel3DialogSome.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(26, 6, 0, 0);
        jPanelDialogSome.add(jLabel3DialogSome, gridBagConstraints);

        txtCodeProductDialogSome.setFont(new java.awt.Font("SansSerif", 0, 17)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 236;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(24, 6, 0, 0);
        jPanelDialogSome.add(txtCodeProductDialogSome, gridBagConstraints);

        jLabel1DialogSome.setText("Agregar varios productos:");
        jLabel1DialogSome.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        jPanelDialogSome.add(jLabel1DialogSome, gridBagConstraints);

        jLabel4DialogSome.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel4DialogSome.setText("Cantidad:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 6, 0, 0);
        jPanelDialogSome.add(jLabel4DialogSome, gridBagConstraints);

        txtQuantityDialogSome.setFont(new java.awt.Font("SansSerif", 0, 17)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 236;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 6, 6, 0);
        jPanelDialogSome.add(txtQuantityDialogSome, gridBagConstraints);

        final Object[] options = {"Agregar", "Cancelar"};
        int result = JOptionPane.showOptionDialog(null, jPanelDialogSome, null, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, null);
        if (result == 0) {
            addSomeProduct(txtCodeProductDialogSome.getText(), Integer.valueOf(txtQuantityDialogSome.getText()));
        }
    }//GEN-LAST:event_btnSomeProductsActionPerformed

    private void btnAssignClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignClientActionPerformed
        // TODO add your handling code here:
        java.awt.GridBagConstraints gridBagConstraints;

        JPanel jPanelDialogAssign = new javax.swing.JPanel();
        JLabel jLabelAssign = new javax.swing.JLabel();
        JTextField txtFolioAssign = new javax.swing.JTextField();
        JLabel jLabel1Assign = new javax.swing.JLabel();

        jPanelDialogAssign.setLayout(new java.awt.GridBagLayout());

        jLabelAssign.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabelAssign.setText("Folio:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(26, 6, 0, 0);
        jPanelDialogAssign.add(jLabelAssign, gridBagConstraints);

        txtFolioAssign.setFont(new java.awt.Font("SansSerif", 0, 17)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 236;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(24, 6, 0, 0);
        jPanelDialogAssign.add(txtFolioAssign, gridBagConstraints);

        jLabel1Assign.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel1Assign.setText("Asignar venta a cliente:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        jPanelDialogAssign.add(jLabel1Assign, gridBagConstraints);

        final Object[] options = {"Agregar", "Cancelar"};
        int result = JOptionPane.showOptionDialog(null, jPanelDialogAssign, null, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, null);
        if (result == 0) {
            searchClient(Integer.valueOf(txtFolioAssign.getText()));
        }
    }//GEN-LAST:event_btnAssignClientActionPerformed

    private void searchClient(int id) {
        SQLiteJDBC sqlite = new SQLiteJDBC();
        String token = sqlite.getToken();
        Call<PersonsResponse> clientResponseCall = ApiClient.getPersonsService().getClientById(id, "Bearer " + token);
        clientResponseCall.enqueue(new Callback<PersonsResponse>() {
            @Override
            public void onResponse(Call<PersonsResponse> call, Response<PersonsResponse> response) {
                if (response.isSuccessful()) {
                    PersonsResponse clientResponse = response.body();
                    if (clientResponse != null) {
                        folioClient = clientResponse.getId();
                        lblClient.setText("Cliente: " + clientResponse.getName() + " " + clientResponse.getLastname());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, String.format("No existe el cliente con folio: %d", id), "Error asignar cliente", JOptionPane.ERROR_MESSAGE);
                }
            }

            @Override
            public void onFailure(Call<PersonsResponse> call, Throwable t) {
                System.out.println(t.getLocalizedMessage());
            }
        });
    }

    private void addProduct() {
        if (!txtCodeProduct.getText().equals("")) {
            btnAddProduct.setBackground(Color.GRAY);
            btnAddProduct.setEnabled(false);
            SQLiteJDBC sqlite = new SQLiteJDBC();
            String token = sqlite.getToken();
            Call<ProductsResponse> productResponseCall = ApiClient.getProductService().getProductByBarcodeWithQuantity(txtCodeProduct.getText(), "Bearer " + token);
            productResponseCall.enqueue(new Callback<ProductsResponse>() {
                @Override
                public void onResponse(Call<ProductsResponse> call, Response<ProductsResponse> response) {
                    if (response.isSuccessful()) {
                        ProductsResponse product = response.body();
                        if (product != null) {
                            DefaultTableModel model = (DefaultTableModel) tblProducts.getModel();
                            if (tblProducts.getRowCount() > 0) {
                                int row = -1;
                                for (int i = 0; i < tblProducts.getRowCount(); i++) {//For each row
                                    if (tblProducts.getModel().getValueAt(i, 0).equals(product.getId())) {//Search the model
                                        row = i;
                                        break;
                                    }
                                }//For loop outer   
                                if (row != -1) {
                                    int quantity = (int) tblProducts.getModel().getValueAt(row, 4) + 1;
                                    double stock = product.getStock() - quantity;
                                    if (stock >= 0) {
                                        tblProducts.getModel().setValueAt(quantity, row, 4);
                                        BigDecimal total = product.getPriceOut1().multiply(new BigDecimal(quantity));
                                        tblProducts.getModel().setValueAt(total, row, 5);
                                        tblProducts.getModel().setValueAt(stock, row, 6);
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Ya no quedan productos de " + product.getName() + "", "Producto", JOptionPane.ERROR_MESSAGE);
                                    }
                                } else {
                                    if (product.getStock() != null) {
                                        model.addRow(new Object[]{
                                            product.getId(),
                                            product.getBarcode(),
                                            product.getName(),
                                            product.getPriceOut1(),
                                            1,
                                            (product.getPriceOut1().multiply(new BigDecimal(1))),
                                            product.getStock() - 1
                                        });
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Ya no quedan productos de " + product.getName() + "", "Producto", JOptionPane.ERROR_MESSAGE);
                                    }
                                }
                            } else {
                                if (product.getStock() != null) {
                                    model.addRow(new Object[]{
                                        product.getId(),
                                        product.getBarcode(),
                                        product.getName(),
                                        product.getPriceOut1(),
                                        1,
                                        product.getPriceOut1().multiply(new BigDecimal(1)),
                                        product.getStock() - 1
                                    });
                                } else {
                                    JOptionPane.showMessageDialog(null, "Ya no quedan productos de " + product.getName() + "", "Producto", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "No existe el producto", "Producto", JOptionPane.ERROR_MESSAGE);
                    }
                    txtCodeProduct.requestFocusInWindow();
                    txtCodeProduct.setText("");
                    refreshTotals();
                    btnAddProduct.setBackground(new java.awt.Color(0, 166, 237));
                    btnAddProduct.setEnabled(true);
                }

                @Override
                public void onFailure(Call<ProductsResponse> call, Throwable t) {
                    System.out.println(t.getLocalizedMessage());
                }
            }
            );
        }
    }

    private void addSomeProduct(String codeProduct, int newQuantity) {
        SQLiteJDBC sqlite = new SQLiteJDBC();
        String token = sqlite.getToken();
        Call<ProductsResponse> productResponseCall = ApiClient.getProductService().getProductByBarcodeWithQuantity(codeProduct, "Bearer " + token);
        productResponseCall.enqueue(new Callback<ProductsResponse>() {
            @Override
            public void onResponse(Call<ProductsResponse> call, Response<ProductsResponse> response) {
                if (response.isSuccessful()) {
                    ProductsResponse product = response.body();
                    if (product != null) {
                        DefaultTableModel model = (DefaultTableModel) tblProducts.getModel();
                        if (tblProducts.getRowCount() > 0) {
                            int row = -1;
                            for (int i = 0; i < tblProducts.getRowCount(); i++) {//For each row
                                if (tblProducts.getModel().getValueAt(i, 0).equals(product.getId())) {//Search the model
                                    row = i;
                                    break;
                                }
                            }//For loop outer   
                            if (row != -1) {
                                int quantity = (int) tblProducts.getModel().getValueAt(row, 4) + newQuantity;
                                double stock = product.getStock() - quantity;
                                if (stock >= 0) {
                                    tblProducts.getModel().setValueAt(quantity, row, 4);
                                    BigDecimal total = product.getPriceOut1().multiply(new BigDecimal(quantity));
                                    tblProducts.getModel().setValueAt(total, row, 5);
                                    tblProducts.getModel().setValueAt(stock, row, 6);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Ya no quedan productos de " + product.getName() + "", "Producto", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                if (product.getStock() != null) {
                                    if (product.getStock() >= newQuantity) {
                                        model.addRow(new Object[]{
                                            product.getId(),
                                            product.getBarcode(),
                                            product.getName(),
                                            product.getPriceOut1(),
                                            newQuantity,
                                            (product.getPriceOut1().multiply(new BigDecimal(newQuantity))),
                                            product.getStock() - newQuantity
                                        });
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Cantidad invalida de " + product.getName() + "", "Producto", JOptionPane.ERROR_MESSAGE);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Ya no quedan productos de " + product.getName() + "", "Producto", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        } else {
                            if (product.getStock() != null) {
                                if (product.getStock() >= newQuantity) {
                                    model.addRow(new Object[]{
                                        product.getId(),
                                        product.getBarcode(),
                                        product.getName(),
                                        product.getPriceOut1(),
                                        newQuantity,
                                        (product.getPriceOut1().multiply(new BigDecimal(newQuantity))),
                                        product.getStock() - newQuantity
                                    });
                                } else {
                                    JOptionPane.showMessageDialog(null, "Cantidad invalida de " + product.getName() + "", "Producto", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Ya no quedan productos de " + product.getName() + "", "Producto", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No existe el producto", "Producto", JOptionPane.ERROR_MESSAGE);
                }

                txtCodeProduct.requestFocusInWindow();
                refreshTotals();
            }

            @Override
            public void onFailure(Call<ProductsResponse> call, Throwable t) {
                System.out.println(t.getLocalizedMessage());
            }
        }
        );
    }

    private void refreshTotals() {
        int totalProducts = 0;
        BigDecimal totalMoney = new BigDecimal(0);
        for (int i = 0; i < tblProducts.getRowCount(); i++) {//For each row
            totalProducts += (int) tblProducts.getValueAt(i, 4);
            String value = String.valueOf(tblProducts.getValueAt(i, 5));
            totalMoney = totalMoney.add(new BigDecimal(value));
        }//For loop outer   
        if (totalProducts == 0) {
            lblTotalProducts.setText("Total productos: 0");
            lblTotalMoney.setText("$0.00");
        } else {
            lblTotalProducts.setText("Total productos: " + totalProducts);
            lblTotalMoney.setText("$" + totalMoney);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProduct;
    private javax.swing.JButton btnAssignClient;
    private javax.swing.JButton btnCharge;
    private javax.swing.JButton btnPendingSell;
    private javax.swing.JButton btnPendingSells;
    private javax.swing.JButton btnRemoveProduct;
    private javax.swing.JButton btnSomeProducts;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClient;
    private javax.swing.JLabel lblCodeProduct;
    private javax.swing.JLabel lblTotalMoney;
    private javax.swing.JLabel lblTotalProducts;
    private javax.swing.JTable tblProducts;
    private javax.swing.JTextField txtCodeProduct;
    // End of variables declaration//GEN-END:variables
}
